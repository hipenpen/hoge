import binascii
import shutil
import os
import time
import random, string
from flask import Flask, request, Markup, abort, url_for, make_response

def randomname(n):
   randlst = [random.choice(string.ascii_letters + string.digits) for i in range(n)]
   return ''.join(randlst)

class graph:
    def __init__(self):
        self._data = "5a5a5a346e06000071c159410d6e06000100f1221541646452656654696d6500416e696d4e616d650044617461004475726174696f6e00456e746974794944004672616d651c0091496e707574004b6579130061004d6f64656c1900013f00914e6f646500506f73693f00a1526f6f740053746172741800016a00d5547261636b005472616e7369746900f11b54797065005f5363656e65506f73005f66696c6550617468005f736b656c65746f6e46696c6500006b01bb00f10100570c010605110009000604140013000a0022060d0800610706041200030c00a003000f050f030f040f0422002203000800600705080208021200110526003107050720005207020703041200e104090002000e00110004000400020400a00900100003000e000a044a00020800510b0009000e060002120000540000a2000c0800220001030093477261706800000167080002160051436861722f1300f1012f63696e656d612f6a696562616e672e1500fe0000000153746174654d616368696e650f00300000015b01416c696e6568010f0f000d027600a02d313735203000000208530105420002f3010b480006150015313100024600020600047f000628000f52000218323d008a4469726563746f720b000250009200000143616d6572616502090e00613031000001631e006049443d303b669b02f014733d3539302e3032372c362e3030342c3231362e3532342c302e3035372c332e3131320c00f00330302c3130362e3231382c302c323230317c3700823536302c352e35383700f4013230392c2d302e3130312c2d322e3030390012364000b1302c323739370000014163e40204090001970002be00234d6f1a00020900061a0010021c020431000543002230323700f323e5889be5bbbae5afb9e8b1a10000017b2263756574797065223a36313135312c2264697361626c65223a66616c73652c22659e03f401223a317d00000560e5503e0002dfee0069001002d901004900062900f313302c226d6f6465223a322c226e616d65223a2267656e762e706c61796572222c2270bc0330223a5b1b01f03030383434303234363538323033312c2d31302e30303434323339303434313839352c2d3130302e363238363031303734323138385d2c227265736f757263659c00a022313336222c22736361bb0090312e302c2273686f772f0405ca00807370656564223a381d0094796177223a302e307dc70009c1001431c1001530c100fb035c75356330315c75393537665c7535623831c800f00232302e3432303432353431353033393036c8001139ba00ed3132343734303630303538353934ba002f3438ba00063f747275b90001602d312e30357de303346172628301b1056abcc43f000583c0ca3e2402f1037374616e6400000591eddc3f00052731e83f1700022f02360000017a0114207201152068010729005f05ee7cbf3e2f000f4174616c6b2d00819f400005333333406e0002c00203e90302ae0009b50003e10203210003b300040800035b02094400026700c00174616c6b00000200000000"
        self.data = "5a5a5a346225000071c159410d6225000100f00f5b416374696f6e44726976650041646452656654696d6500416e696d4e6109006070706c794d6f2500f108546f456e74697479004175746f4c69667400426567696e3000a14269617300426c656e640f00f107436865636b4d61726b44697200436f6c6c6973696f6e1600060f005746696c74651f00d052616469757300436f6e6669670700f00e6e6563744576656e740043756500446174610044656661756c7456616c0b00756f726d004465742700006e00f401446f7452616e676500446f776e41636308001132090001280011310b00304d6178ac00020d003456656c0800f006320044726f7054657374486569676874004475726100016200456d7074796a0042456e64000a00824661746e65737300ce00f024496e666f00466f63757300466f6f74737465700048616c666c6966650049676e6f726500496e697453656c65637400496e7075060021737518009174657276616c004c005e01b14d617844697374004d696e0800019001f2164f6e6573686f74004f757470757454797065004f76657272696465506172616d005065616b9a00f212506c61796261636b537065656400520052616e646f6d446966660052656d6f7665d701a000526573657400526f6f0500a174536b656c65746f6e00a300016200030b00b05768656e0053696e676c655b00610053746172740600017f01030b00424e6f64650a00010a024353746f701e0040796e630014009250657200546f7563681800615472616e73698a00e1547269676765725369676e616c007b00205570c401215570c201525570456e643600235570c001060a0000200000c801215570c601305661724200000800466961626c09000148014056656c4daa00315961770800815f446573637269708800f10c5f4d6178005f4d696e005f526573756c74506f73005f5363656e650a0051547261636b4700215f732f0101cd0252650000ab095703ff03a9063801276447002e002704500650065005020027063e00251f01020036021f020c000202000a1800092c001f0102002651020c005a00c800ec053f002e004f00540010005600550c000f0a00ff100f380129070200105404000810000804000e24000c3c000f0200281254080242095800570a00c3082700580011002b0004002024029327055800450545063f1000355800570a00004002773d001e001c001f0a0012462000150c2a0016133400f3022705270458003a003b00260035003700072200004e00f60c12000d001d001300060014002d002c002900080009000a00220025a8000b0a0033580051ba000f42000d1a313000300c270432005324003e00419c000f1200010310000c3e003b072707c8000420000c2a004e1d5800571c000642010912009a5800020001003600030e000cba001d0002000e1400e204270b58000700520053003900003a004b175800575a004242010e0502000f180005097c001b04c001021600100bca00ff214d0048004b004a004e0049004c00320019001500180017001a00160044001b000b0021002302590043002e000f0047000a000a0f2a00180aa0003a5800301200390a270db2000784017f2a00340034002a820100593c0036001f16017d050040000100331a0013518a003f2f00289e00010f1e000c22000103009347726170680000016708000f0300ff14cb53746174654d616368696e650f0002210002bd0a307265656301f02c5f4d4f56455f5350454544000001666c6f6174000001e8849ae69cace8aebee7bdaee8a792e889b2e79a84e7a7bbe58aa8e9809fe5baa600000205ff072102000600311400004d003f59415746000af400e99da2e59091596177e8bdace8a79240005105250649c00600d0400001626f6d625f61696d5f74d408500001696e742800076e00110a6e00b563616e5f646f636b696e6726001f012600025f70616e7061240008004600205f61ee0903bd000f2700081062ff0bf1040001566563746f72330000013020312e3520300a0011300800313130200300043300376d617858001f02580003376d696e25000eee0020656ed1096f5f736c6f7065cb0008af6769616e745f737461743b0103120226002f756e5e010d5f68616e6469ef00021f30ed00058f69734c6f6f6b41749f0008a969734e65617257616c6ced000e27006f5f6f74686572a00002140123003f72756e21000b4f73656c66e300088b6a756d705f646972e0001f33e000020430004668696768bc005f0500002040560000376c6f7725004f6666663f2500033765737428003f9a9919280001696d6964646c6528001bd928009f6c6f63616c5f79617757010a506e6565645fd9013f5f696ba50108276f6ec0000f2300050ebe004c6666863f26000fbc0011407069706587011065a00f0ad2010c29008774636844656c7461500044cdcccc3d4604af6666e63f0001706f7365de020daf73616e677368695f6e6f0801084b736869664c03ff0c01302de6ada3e5b8b80a312de5b7a6e68ea20a322de58fb3e68ea268000310746e0101c6016f6e6f5f6d6f7695000931796177de000bc40108de00012500235f68670f0fed010a4f7a65726f21000a64232a2d2a2d2a090014330900123909004431302d2a0a0014310b0013320b0094e7bfbbe7aa97e688b717001132170069e4ba8ce5b1821a0016313c002531320b002632310b0005160013335d00f300e8b7b3e588b0e6b0b4e7aea1e4b88a1d00036300021700c4e8bebee588b0e9a1b6e983a8200012339a005288ace7a0b42600041a0012349d00e2b88ae6969ce79a84e688bfe9a1b61d001434dc0053302d3130300b000fe700031f30e700053040496499056070656369616c1000404a756d706211030c0000ca0f040b00012e10090d00304e65771000925069636b5570000001a61235456e640c0000f51000b607426173654cc407f000e4b88de58581e8aeb8e8bf87e4bd8ed400209480fa0022babf090070000001437265657a00040b00244f4b0a003352756e0b00028200060d00216f700c0000b1103552756e0c00031900ba446f636b51756974456e640e0017320f0004520000e00031546f543900714c6561766550699103834d6f76654c6566740b00115277126300014f6e746fe800405475726e2200030b0004220020616118033062626206004569727468b8076463745f656e640f002666690c00346e6f741000000700205f65d612330000018803166e8b06336f66660a00017806045808745f7570646f776e170002c903426f6e5f772c00000700605f6661696c649a02e8b2a1e6a380e6b58be588b0e5a2996809070c00038309602d333530203555065032323020340900048e1202ed132f6572130003033f00503235202d39b303a548705f30322c312e31200400112cbe111020e6120b1900002d001f331400001a31140004280421030109000f530a0b079400653735202d36381100514c6f636f6d7813080001091900033a000039002131356e072b20386000034c02042a0075312033350000013f03094f00405f746f5f1a00091500032e00012b06234c3e7b0308a702003600092f000d4300063c0032466c790e032a0301d400156c2d0007e1011137e001583520313537030108c000043c0160323030202d37db00333730303100003315033f152f6f72100000067b01057a011070191500ef024572616d65c80100af00012a07423e000144da023244657447000812000a59001234890008e8020f66030a023509752e3730373130370900064b0900300c193f880a220205670200a2002102046a027e32303120323032a90c3469646c3c0370343530202d3134ff027c333031202d31315f013872756e2c00012b00603832362033352501041e1500c015054a0a042d0026353713000f2e011960313530203133b900082401083d010f21010f41e17a343f890804590a0e21014202650000640000be001145150c0bd30006fc0a039700393330371400df596177436f6e74726f6c6c657210000009670420353747020475000f3e00195f35353020343f00190ce1042531383c000ff30019102df4001832f4000f4c031a77333234202d36374d039d61637469766174656451032a4c3e880004040f044800373135381300031e190dbd000ad509043c003a3238331a000c470604ce06013603313020347d028f37323520383537009800061032d4012f353797001e033b003b36383219000eb00576466c79315f2331090500a3031338ce0c2f75709c0004042c00069c00050209374e6f640304432d373030fe066032303236345f180007b4062f03013800082f33323700070a98000a870e202d369301273038160002c30834696e6747022f32441300000fd0112f1035e304233932850609a90c1b03890605640106c205212d3259078c363236202d3431385401a1436f727073655f4677648001743734202d32313724010006050923010a9a000f4d0005156cf8012f36384b00140a15020c9a12049c003b3233331a000fdb031a7f34393920333833db030f1001611c59626f6c61000b00036d03723736202d363138fc1100a804023010422d352030a70d173e000b0c331105d304091900222d311b001f051b0004074b0c02ab0e050e02141f3200f0164375653031000005d9ce773e0001e8afbbe8a1a8e692ade694bee5a3b0e99fb3000002310c3a02112e32006145666665637432004404aced3e1100006605f0025f46782f466561747572652f6a7572656ebc01c05f786c3a6269706564205220f01d613a2d313a3130010000b90034fd7f00840003c9060f84001b4f2c287c3f8400181f4c8400030b0b013f3f359e0b011c3f8868ac0b01300b55003f05c53fdc002a0e60013f2fdd4460010e0b52030b2512003509583520333332180006091360457874726163b4200e1300034d037338343820343538b5020f3c0506056c003736303717000fb8031a0096042f3834b8031101111f0b8d0007ea13044d00373434321600056211fd010ef3f53e0005562bb33e0005cc25453f4800f20a5359535f454e544954595f4c4f43414c5f56454c4f43495459e6006f3234203433332800090c3205016821405f41525f4410025f0e1131ed04563939202d393e05011b000f3f05020f52001010697520177559002c383159005205022b073e0600066f122a663f6b000e58010edf120564003f36363821000501d720233031c90406560d06be07417564696fe902f0093750603d0001e68c82e68ea5e99fb3e69588e4ba8be4bbb66401806f756e64732f3b730800422e6665760a00422f636861a80231312f611901102f7f00433b303b3071000860004fc2a6c63e60002700f422402f706c5f0800103162000666000fe7001b4fa302473ee700494f25cf013fe7003e500201000000"
    def set(self, x, l):
        if (len(x)>=l):
            return x 
        x+="."
        while True:  
            if (len(x)==l):
                return x
            else:
                x += "0"
    def change(self, x):
        _x = ""
        for i in x:
            if (i == "-") or (i == "."):
                _x += i.replace("-", "2d").replace(".", "2e")
            else:
                _x += str(int(i)+30)
        return _x
    def aircraft(self, arg):
        return self._data.replace("3539302e303237", self.change(self.set(str(arg[0]), 7))).replace("2d31302e3030343432333930343431383935", self.change(self.set(str(arg[2]), 18))).replace("2d3130302e36323836303130373432313838", self.change(self.set(str(arg[1]), 18)))
    def save(self, func, path):
        with open(path, mode='bw') as f:
            f.write(binascii.unhexlify(func))
    def empty(self, arg):
        return self.data.replace("312e31", self.change(self.set(str(arg), 3)))




app = Flask(__name__)




@app.route('/empty', methods=['GET'])
def test():
    graphtool = graph()
    try:
        path = "graph/" + randomname(6)
        os.makedirs(path, exist_ok=True)
        graphtool.save(graphtool.empty((request.args.get('arg', '1.0'))), path + "/empty.graph")
        response = make_response()
        response.data  = open(path + "/empty.graph", "rb").read()
        response.headers['Content-Disposition'] = 'attachment; filename=empty.graph'
        return response
    except Exception as e:
        return str(e)
@app.route('/aircraft', methods=['GET'])
def hoge():
    graphtool = graph()
    try:
        path = "graph/" + randomname(6)
        os.makedirs(path, exist_ok=True)
        arg = (request.args.get('x', '0'), request.args.get('y', '0'), request.args.get('z', '0'))
        graphtool.save(graphtool.aircraft(arg), path + "/aircraft.graph")
        response = make_response()
        response.data  = open(path + "/aircraft.graph", "rb").read()
        response.headers['Content-Disposition'] = 'attachment; filename=aircraft.graph'
        return response
    except Exception as e:
        return str(e)


if __name__ == '__main__':
    app.run()
